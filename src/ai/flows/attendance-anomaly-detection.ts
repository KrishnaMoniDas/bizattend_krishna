
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered tool to detect and flag attendance irregularities.
 *
 * - attendanceAnomalyDetection - A function that handles the attendance anomaly detection process.
 * - AttendanceAnomalyDetectionInput - The input type for the attendanceAnomalyDetection function.
 * - AttendanceAnomalyDetectionOutput - The return type for the attendanceAnomalyDetection function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AttendanceAnomalyDetectionInputSchema = z.object({
  employeeId: z.string().describe('The ID of the employee.'),
  clockInTime: z.string().describe('The clock-in time of the employee (ISO format).'),
  clockOutTime: z.string().describe('The clock-out time of the employee (ISO format).'),
  expectedClockInTime: z.string().describe('The expected clock-in time of the employee (ISO format).'),
  expectedClockOutTime: z.string().describe('The expected clock-out time of the employee (ISO format).'),
});
export type AttendanceAnomalyDetectionInput = z.infer<typeof AttendanceAnomalyDetectionInputSchema>;

const AttendanceAnomalyDetectionOutputSchema = z.object({
  isAnomaly: z.boolean().describe('Whether the attendance record is an anomaly.'),
  anomalyExplanation: z.string().describe('The explanation of why the attendance record is an anomaly.'),
});
export type AttendanceAnomalyDetectionOutput = z.infer<typeof AttendanceAnomalyDetectionOutputSchema>;

export async function attendanceAnomalyDetection(input: AttendanceAnomalyDetectionInput): Promise<AttendanceAnomalyDetectionOutput> {
  return attendanceAnomalyDetectionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'attendanceAnomalyDetectionPrompt',
  input: {
    schema: z.object({
      employeeId: z.string().describe('The ID of the employee.'),
      clockInTime: z.string().describe('The clock-in time of the employee (ISO format).'),
      clockOutTime: z.string().describe('The clock-out time of the employee (ISO format).'),
      expectedClockInTime: z.string().describe('The expected clock-in time of the employee (ISO format).'),
      expectedClockOutTime: z.string().describe('The expected clock-out time of the employee (ISO format).'),
    }),
  },
  output: {
    schema: z.object({
      isAnomaly: z.boolean().describe('Whether the attendance record is an anomaly.'),
      anomalyExplanation: z.string().describe('The explanation of why the attendance record is an anomaly.'),
    }),
  },
  prompt: `You are an AI expert in detecting anomalies in employee attendance records.

You will receive the employee ID, clock-in time, clock-out time, expected clock-in time, and expected clock-out time.

You will determine if the attendance record is an anomaly and provide an explanation.

Employee ID: {{{employeeId}}}
Clock-in time: {{{clockInTime}}}
Clock-out time: {{{clockOutTime}}}
Expected clock-in time: {{{expectedClockInTime}}}
Expected clock-out time: {{{expectedClockOutTime}}}

Is this attendance record an anomaly? Respond with a boolean.
Explain why or why not this attendance record is an anomaly. Focus on the magnitude of the anomaly.`,
});

const attendanceAnomalyDetectionFlow = ai.defineFlow<
  typeof AttendanceAnomalyDetectionInputSchema,
  typeof AttendanceAnomalyDetectionOutputSchema
>({
  name: 'attendanceAnomalyDetectionFlow',
  inputSchema: AttendanceAnomalyDetectionInputSchema,
  outputSchema: AttendanceAnomalyDetectionOutputSchema,
}, async input => {
  const result = await prompt(input);

  // Check if the result or the output property is missing
  if (!result || !result.output) {
      console.error("AI prompt did not return the expected output structure.", result);
      // Return a default error object matching the schema to avoid crashing the caller
       return {
           isAnomaly: true, // Default to anomaly on error? Or false? Adjust as needed.
           anomalyExplanation: "Error: AI analysis failed to produce a valid result.",
       };
      // Alternatively, you could throw an error:
      // throw new Error("AI prompt failed to return expected output.");
  }

  // Destructure now that we know result and result.output exist
  const { output } = result;
  return output; // Return the valid output
});

